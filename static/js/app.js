console.log('ZooList loaded!');

let allPets = [];
let currentBookings = []; // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£

document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    checkAuth();

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.getElementById('login-btn').addEventListener('click', () => AuthManager.showLoginModal());
    document.getElementById('register-btn').addEventListener('click', () => AuthManager.showRegisterModal());
    document.getElementById('logout-btn').addEventListener('click', logout);

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.getElementById('nav-my-pets').addEventListener('click', async (e) => {
        e.preventDefault();
        await showSection('my-pets');
        setActiveNav('nav-my-pets');
    });

    document.getElementById('nav-bookings').addEventListener('click', async (e) => {
        e.preventDefault();
        await showSection('bookings');
        setActiveNav('nav-bookings');
    });

    document.getElementById('nav-all-pets').addEventListener('click', async (e) => {
        e.preventDefault();
        await showSection('all-pets');
        setActiveNav('nav-all-pets');
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    document.querySelector('.close').addEventListener('click', function() {
        document.getElementById('pet-modal').classList.add('hidden');
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É —Å–Ω–∞—Ä—É–∂–∏
    document.getElementById('pet-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            this.classList.add('hidden');
        }
    });

    document.getElementById('add-pet-btn').addEventListener('click', showAddPetModal);
});

function checkAuth() {
    const token = localStorage.getItem('token');
    if (token) {
        showMainApp();
        // loadMyPets();
    } else {
        showWelcomePage();
    }
}

function showWelcomePage() {
    document.getElementById('welcome-page').classList.remove('hidden');
    document.getElementById('main-app').classList.add('hidden');
}

function showMainApp() {
    document.getElementById('welcome-page').classList.add('hidden');
    document.getElementById('main-app').classList.remove('hidden');
}

function setActiveNav(navId) {
    document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
    });
    document.getElementById(navId).classList.add('active');
}



// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ app.js
function handleAuthError(error) {
    if (error.message === 'AUTH_REQUIRED') {
        showWelcomePage();
        alert('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        return true;
    }
    return false;
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadMyPets() {
    try {
        const response = await API.getMyPets();
        console.log('My pets response:', response);
        const pets = response.myPetList || [];
        allPets = pets;
        await renderPets(pets, 'my-pets');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤:', error);
        if (!handleAuthError(error)) {
            throw error;
        }
    }
}

async function loadMyBookings() {
    try {
        const response = await API.getMyBookings();
        console.log('Bookings response:', response);
        const bookings = response.my_booking || [];
        currentBookings = bookings;
        await renderPets(bookings, 'bookings');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
        if (!handleAuthError(error)) {
            throw error;
        }
    }
}

async function loadAllPets() {
    try {
        const response = await API.getAllPets();
        console.log('All pets response:', response);
        const pets = response.petList || [];
        allPets = pets;
        await renderPets(pets, 'all-pets');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤:', error);
        if (!handleAuthError(error)) {
            throw error;
        }
    }
}

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
// –í —Ñ—É–Ω–∫—Ü–∏—é renderPets –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
async function renderPets(petsData, sectionType) {
    const container = document.querySelector(`#${sectionType}-content .pets-container`);

    console.log(`üéØ renderPets called for ${sectionType}:`, petsData); // ‚Üê –î–û–ë–ê–í–¨
    console.log(`üéØ Container found:`, container); // ‚Üê –î–û–ë–ê–í–¨

    container.innerHTML = '';

    if (!petsData || petsData.length === 0) {
        console.log('No pets data or empty array'); // ‚Üê –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        if (sectionType === 'my-pets') {
            container.innerHTML = `
                <div class="no-pets">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤</p>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!</p>
                </div>
            `;
        } else if (sectionType === 'bookings') {
            container.innerHTML = `
                <div class="no-pets">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                    <p>–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ "–û–±—â–µ–≥–æ –ø–∏—Ç–æ–º–Ω–∏–∫–∞"!</p>
                </div>
            `;
        } else if (sectionType === 'all-pets') {
            container.innerHTML = `
                <div class="no-pets">
                    <p>–í –ø–∏—Ç–æ–º–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤</p>
                    <p>–ü–∏—Ç–æ–º—Ü—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Ö –¥–æ–±–∞–≤—è—Ç</p>
                </div>
            `;
        }
        return;
    }

    console.log(`‚úÖ Rendering ${petsData.length} pets for ${sectionType}`); // ‚Üê –î–û–ë–ê–í–¨

    // petsData.forEach((pet, index) => {
    //     console.log(`üîÑ Creating card ${index} for ${sectionType}:`, pet); // ‚Üê –î–û–ë–ê–í–¨
    //     const card = createPetCard(pet, sectionType);
    //     container.appendChild(card);
    // });

    // –°–û–ó–î–ê–ï–ú –ö–ê–†–¢–û–ß–ö–ò –ê–°–ò–ù–•–†–û–ù–ù–û
    for (let i = 0; i < petsData.length; i++) {
        const pet = petsData[i];
        console.log(`üîÑ Creating card ${i} for ${sectionType}:`, pet);
        const card = await createPetCard(pet, sectionType);
        container.appendChild(card);
    }

    console.log(`‚úÖ Finished rendering ${sectionType}`); // ‚Üê –î–û–ë–ê–í–¨
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function showAddPetModal() {
    const modal = document.getElementById('pet-modal');
    const modalBody = document.getElementById('modal-body');

    modalBody.innerHTML = `
    <div class="add-pet-modal">
        <h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞</h2>
        <form id="add-pet-form">
            <input type="text" id="pet-name" placeholder="–ò–º—è –ø–∏—Ç–æ–º—Ü–∞" required>
            
            <select id="pet-species" required>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥</option>
                <option value="–ö–æ—Ç–æ–∑–æ–º–±–∏">–ö–æ—Ç–æ–∑–æ–º–±–∏</option>
                <option value="–ì—Ä–∏–±">–ì—Ä–∏–±</option>
                <option value="–í–æ–ª–∫">–í–æ–ª–∫</option>
                <option value="–î–∏–Ω–æ–∑–∞–≤—Ä">–î–∏–Ω–æ–∑–∞–≤—Ä</option>
                <option value="–í–æ—Ä–æ–Ω">–í–æ—Ä–æ–Ω</option>
                <option value="–õ—É–ø–æ–≥–ª–∞–∑–∏–∫">–õ—É–ø–æ–≥–ª–∞–∑–∏–∫</option>
                <option value="–ì–æ—Ä–≥—É–ª—å—è">–ì–æ—Ä–≥—É–ª—å—è</option>
                <option value="–û–ª–µ–Ω—å">–û–ª–µ–Ω—å</option>
                <option value="–ë–µ—Å">–ë–µ—Å</option>
                <option value="–ö–æ—Ç–æ–∞–Ω–≥–µ–ª">–ö–æ—Ç–æ–∞–Ω–≥–µ–ª</option>
                <option value="–õ–∏—Å">–õ–∏—Å</option>
                <option value="–ü–∏–∫—Å–∏">–ü–∏–∫—Å–∏</option>
                <option value="–ü–æ–¥—Å–æ–ª–Ω—É—Ö">–ü–æ–¥—Å–æ–ª–Ω—É—Ö</option>
                <option value="–ó–∞—è—Ü">–ó–∞—è—Ü</option>
                <option value="–û—Å—å–º–æ–∫—Ä—ã–ª">–û—Å—å–º–æ–∫—Ä—ã–ª</option>
                <option value="–°—É–ø–µ—Ä–û–ª–µ–Ω—å">–°—É–ø–µ—Ä–û–ª–µ–Ω—å</option>
                <option value="–õ—é–º–∏–∫">–õ—é–º–∏–∫</option>
                <option value="–í–∏–≤–µ—Ä–Ω–∞">–í–∏–≤–µ—Ä–Ω–∞</option>
            </select>
            
            <select id="pet-skill" required>
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫</option>
                <option value="–ê–ª—Ö–∏–º–∏—è">–ê–ª—Ö–∏–º–∏—è</option>
                <option value="–ê—Ä–µ–Ω–∞">–ê—Ä–µ–Ω–∞</option>
                <option value="–ü–∞—Ä—Ç–Ω–µ—Ä—ã">–ü–∞—Ä—Ç–Ω–µ—Ä—ã</option>
                <option value="–õ–∏–≥–∞">–õ–∏–≥–∞</option>
                <option value="–õ–æ–∂–∞">–õ–æ–∂–∞</option>
                <option value="–†—ã–±–∞–ª–∫–∞">–†—ã–±–∞–ª–∫–∞</option>
                <option value="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-—Ç–∞–ª–∞–Ω—Ç">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-—Ç–∞–ª–∞–Ω—Ç</option>
                <option value="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-–Ω–∞–≤—ã–∫–∏">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-–Ω–∞–≤—ã–∫–∏</option>
                <option value="–¢–µ–º–Ω–∞—è –ø—Ä–æ–ø–∞—Å—Ç—å">–¢–µ–º–Ω–∞—è –ø—Ä–æ–ø–∞—Å—Ç—å</option>
                <option value="–ö–æ–ª–æ–¥–µ—Ü">–ö–æ–ª–æ–¥–µ—Ü</option>
                <option value="–ì—Ä–∏–±—ã">–ì—Ä–∏–±—ã</option>
                <option value="–ö—Ä–∏—Å—Ç–∞–ª–ª—ã">–ö—Ä–∏—Å—Ç–∞–ª–ª—ã</option>
                <option value="–ö–æ–Ω–∫–ª–∞–≤">–ö–æ–Ω–∫–ª–∞–≤</option>
            </select>
            
            <select id="pet-skill-level" required>
                <option value="">–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞</option>
                <option value="1">I</option>
                <option value="2">II</option>
                <option value="3">III</option>
                <option value="4">IV</option>
                <option value="5">V</option>
            </select>
            
            <div class="pet-stats">
                <h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞</h3>
                <div class="stats-grid">
                    <div class="stat-input">
                        <label for="pet-loyalty">–õ–æ—è–ª—å–Ω–æ—Å—Ç—å</label>
                        <input type="number" id="pet-loyalty" min="1" max="300" value="5" required>
                    </div>
                    <div class="stat-input">
                        <label for="pet-agility">–õ–æ–≤–∫–æ—Å—Ç—å</label>
                        <input type="number" id="pet-agility" min="1" max="300" value="5" required>
                    </div>
                    <div class="stat-input">
                        <label for="pet-stamina">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å</label>
                        <input type="number" id="pet-stamina" min="1" max="300" value="5" required>
                    </div>
                    <div class="stat-input">
                        <label for="pet-instinct">–ò–Ω—Å—Ç–∏–Ω–∫—Ç</label>
                        <input type="number" id="pet-instinct" min="1" max="300" value="5" required>
                    </div>
                    <div class="stat-input">
                        <label for="pet-charm">–û–±–∞—è–Ω–∏–µ</label>
                        <input type="number" id="pet-charm" min="1" max="300" value="5" required>
                    </div>
                </div>
            </div>

            <div class="pet-options">
                <label><input type="checkbox" id="pet-ideal"> üåü –ò–¥–µ–∞–ª—å–Ω—ã–π</label>
                <label><input type="checkbox" id="pet-mutant"> üß¨ –ú—É—Ç–∞–Ω—Ç</label>
            </div>
            <button type="submit">–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞</button>
        </form>
        <button class="btn-cancel">–û—Ç–º–µ–Ω–∞</button>
    </div>
`;

    modal.classList.remove('hidden');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('add-pet-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        await createNewPet();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    document.querySelector('.btn-cancel').addEventListener('click', () => {
        modal.classList.add('hidden');
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
async function createNewPet() {
    try {
        const petData = {
            Name: document.getElementById('pet-name').value,
            Species: document.getElementById('pet-species').value,
            Skill_Name: document.getElementById('pet-skill').value,
            Skill_Level: parseInt(document.getElementById('pet-skill-level').value),
            Is_Ideal: document.getElementById('pet-ideal').checked,
            Is_Mutant: document.getElementById('pet-mutant').checked,
            Stats: {
                Loyalty: parseInt(document.getElementById('pet-loyalty').value),
                Agility: parseInt(document.getElementById('pet-agility').value),
                Stamina: parseInt(document.getElementById('pet-stamina').value),
                Instinct: parseInt(document.getElementById('pet-instinct').value),
                Charm: parseInt(document.getElementById('pet-charm').value)
            }
        };

        console.log('Creating pet with correct structure:', petData);

        const result = await API.createPet(petData);
        console.log('Pet created:', result);

        document.getElementById('pet-modal').classList.add('hidden');
        await loadMyPets();

    } catch (error) {
        console.error('Error creating pet:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞: ' + error.message);
    }
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ createPetCard –¥–ª—è —Å–µ–∫—Ü–∏–∏ 'bookings' –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
async function createPetCard(pet, sectionType) {
    const card = document.createElement('div');
    card.className = 'pet-card';

    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –í–°–ï–• –°–ï–ö–¶–ò–ô:
    const petName = pet.pet_name || pet.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const petSpecies = pet.pet_species || pet.species || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const skillName = pet.pet_skill_name || pet.skill_name || '–ù–µ—Ç –Ω–∞–≤—ã–∫–∞';
    const skillLevel = pet.pet_skill_level || pet.skill_level || '0';

    // –ñ–î–ï–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    const imagePath = await getPetImage(petSpecies);

    let buttons = '';
    if (sectionType === 'my-pets') {
        buttons = `
            <button class="btn-edit" onclick="editPet(${pet.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            <button class="btn-delete" onclick="deletePet(${pet.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        `;
    } else if (sectionType === 'all-pets') {
        buttons = `<button class="btn-book" onclick="bookPet(${pet.id})">üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>`;
    } else if (sectionType === 'bookings') {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º pet.pet_id –¥–ª—è –æ—Ç–º–µ–Ω—ã
        buttons = `<button class="btn-cancel-booking" onclick="cancelBooking(${pet.pet_id})">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å</button>`;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô HTML –° –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ú–ò –ü–û–õ–Ø–ú–ò:
    card.innerHTML = `
        <img src="${imagePath}" alt="${petName}" onerror="this.src='/static/images/pets/default.svg'">
        <h3>${petName}</h3>
        <p>–í–∏–¥: ${petSpecies}</p>
        <p>–ù–∞–≤—ã–∫: ${skillName} (—É—Ä–æ–≤–µ–Ω—å ${skillLevel})</p>
        ${pet.booking_position ? `<p>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${pet.booking_position}</p>` : ''}
        ${pet.is_ideal ? '<span class="badge ideal">üåü –ò–¥–µ–∞–ª—å–Ω—ã–π</span>' : ''}
        ${pet.is_mutant ? '<span class="badge mutant">üß¨ –ú—É—Ç–∞–Ω—Ç</span>' : ''}
        <div class="pet-actions">
            <button class="btn-details" onclick="showPetDetails(${pet.pet_id || pet.id}, '${sectionType}')">
                üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </button>
            ${buttons}
        </div>
    `;

    return card;
}

async function getPetImage(species) {
    const formats = ['webp', 'svg', 'png', 'jpg'];
    const fileName = species.toLowerCase().replace(/\s+/g, '_');

    for (let format of formats) {
        const path = `/static/images/pets/${fileName}.${format}`;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if (await imageExists(path)) return path;
    }
    return '/static/images/pets/default.svg';
}

function imageExists(url) {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
        img.src = url;
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function cancelBooking(petId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
        return;
    }

    try {
        await API.cancelBooking(petId);
        console.log('Booking cancelled for pet:', petId);
        alert('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!');
        await loadMyBookings();
        await loadAllPets();
    } catch (error) {
        console.error('Error cancelling booking:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–∏—Ç–æ–º—Ü–∞
async function showPetDetails(petId, sectionType) {
    let pet;

    // –ü–û–ò–°–ö –î–õ–Ø –í–°–ï–• –°–ï–ö–¶–ò–ô:
    if (sectionType === 'bookings') {
        pet = currentBookings.find(b => b.pet_id === petId);
    } else {
        // –î–ª—è all-pets –∏ my-pets –∏—â–µ–º –≤ allPets
        pet = allPets.find(p => p.id === petId);
    }

    if (!pet) {
        console.error('Pet not found:', petId, 'in section:', sectionType);
        alert('–î–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const modal = document.getElementById('pet-modal');
    const modalBody = document.getElementById('modal-body');

    let actionButtons = '';
    if (sectionType === 'my-pets') {
        actionButtons = `
            <button class="btn-edit" onclick="editPet(${pet.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞</button>
            <button class="btn-book" onclick="manageQueue(${pet.id})">üìã –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—á–µ—Ä–µ–¥—å—é</button>
        `;
    } else if (sectionType === 'all-pets') {
        actionButtons = `<button class="btn-book" onclick="bookPet(${pet.id})">üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>`;
    } else if (sectionType === 'bookings') {
        actionButtons = `<button class="btn-cancel-booking" onclick="cancelBooking(${pet.pet_id})">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</button>`;
    }

    // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:
    const petName = pet.pet_name || pet.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const petSpecies = pet.pet_species || pet.species || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const skillName = pet.pet_skill_name || pet.skill_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const skillLevel = pet.pet_skill_level || pet.skill_level || '?';

    modalBody.innerHTML = `
        <div class="pet-details">
            <h2>${petName}</h2>
            <img src="https://via.placeholder.com/300x200/667eea/ffffff?text=${encodeURIComponent(petSpecies)}" alt="${petName}" style="width: 200px; border-radius: 10px;">
            
            <div class="details-info">
                <p><strong>–í–∏–¥:</strong> ${petSpecies}</p>
                <p><strong>–ù–∞–≤—ã–∫:</strong> ${skillName} (—É—Ä–æ–≤–µ–Ω—å ${skillLevel})</p>
                
                ${pet.booking_position ? `<p><strong>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</strong> ${pet.booking_position}</p>` : ''}
                ${pet.estimated_wait_time ? `<p><strong>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</strong> ${pet.estimated_wait_time} —á–∞—Å–æ–≤</p>` : ''}
                
                <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ -->
                ${(pet.stats || pet.loyalty) ? `
                <div class="pet-stats">
                    <h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>
                    <ul>
                        ${pet.stats ? `
                            <li>–õ–æ—è–ª—å–Ω–æ—Å—Ç—å: ${pet.stats.loyalty || 0}</li>
                            <li>–õ–æ–≤–∫–æ—Å—Ç—å: ${pet.stats.agility || 0}</li>
                            <li>–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: ${pet.stats.stamina || 0}</li>
                            <li>–ò–Ω—Å—Ç–∏–Ω–∫—Ç: ${pet.stats.instinct || 0}</li>
                            <li>–û–±–∞—è–Ω–∏–µ: ${pet.stats.charm || 0}</li>
                        ` : `
                            <li>–õ–æ—è–ª—å–Ω–æ—Å—Ç—å: ${pet.loyalty || 0}</li>
                            <li>–õ–æ–≤–∫–æ—Å—Ç—å: ${pet.agility || 0}</li>
                            <li>–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: ${pet.stamina || 0}</li>
                            <li>–ò–Ω—Å—Ç–∏–Ω–∫—Ç: ${pet.instinct || 0}</li>
                            <li>–û–±–∞—è–Ω–∏–µ: ${pet.charm || 0}</li>
                        `}
                    </ul>
                </div>
                ` : ''}
                
                <!-- –°–µ–∫—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –í–°–ï–• –ø–∏—Ç–æ–º—Ü–µ–≤ -->
                <div class="queue-section">
                    <h3>–û—á–µ—Ä–µ–¥—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</h3>
                    <div id="queue-content">
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏...</p>
                    </div>
                </div>
            </div>
            
            <div class="action-buttons">
                ${actionButtons}
                <button class="btn-cancel" onclick="document.getElementById('pet-modal').classList.add('hidden')">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;

    modal.classList.remove('hidden');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        try {
            await loadQueueForPet(petId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
            document.getElementById('queue-content').innerHTML =
                '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏</p>';
        }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
async function loadQueueForPet(petId) {
    try {
        const queue = await API.getPetQueue(petId);
        const queueContent = document.getElementById('queue-content');

        if (!queue || queue.length === 0) {
            queueContent.innerHTML = '<p>–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</p>';
        } else {
            queueContent.innerHTML = `
                <div class="queue-list">
                    ${queue.map((booking, index) => `
                        <div class="queue-item ${index === 0 ? 'current' : ''}">
                            <span class="queue-position">${index + 1}.</span>
                            <span class="queue-user">${booking.nickname}</span>
                            <span class="wait-time">${formatWaitTime(booking.ready_in)}</span>
                            ${index === 0 ? '<span class="badge current-badge">–¢–µ–∫—É—â–∏–π</span>' : ''}
                        </div>
                    `).join('')}
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading queue:', error);
        document.getElementById('queue-content').innerHTML =
            '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏: –æ—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
    }
}

async function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.add('hidden');
        section.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(`${sectionName}-content`);
    targetSection.classList.remove('hidden');
    targetSection.classList.add('active');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const container = targetSection.querySelector('.pets-container');
    container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    try {
        await loadSectionData(sectionName);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ ${sectionName}:`, error);
        container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${sectionName}: ${error.message}`); // ‚Üê alert –∑–¥–µ—Å—å
    }
}

async function loadSectionData(sectionName) {
    switch(sectionName) {
        case 'my-pets':
            await loadMyPets();
            break;
        case 'bookings':
            await loadMyBookings();
            break;
        case 'all-pets':
            await loadAllPets();
            break;
    }
}

function logout() {
    localStorage.removeItem('token');
    showWelcomePage();
}

async function editPet(petId) {
    const pet = allPets.find(p => p.id === petId);
    if (!pet) return;

    const modal = document.getElementById('pet-modal');
    const modalBody = document.getElementById('modal-body');

    modalBody.innerHTML = `
        <div class="add-pet-modal">
            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞</h2>
            <form id="edit-pet-form">
                <input type="text" id="edit-pet-name" value="${pet.name}" placeholder="–ò–º—è –ø–∏—Ç–æ–º—Ü–∞" required>
                
                <select id="edit-pet-species" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥</option>
                    <option value="–ö–æ—Ç–æ–∑–æ–º–±–∏" ${pet.species === '–ö–æ—Ç–æ–∑–æ–º–±–∏' ? 'selected' : ''}>–ö–æ—Ç–æ–∑–æ–º–±–∏</option>
                    <option value="–ì—Ä–∏–±" ${pet.species === '–ì—Ä–∏–±' ? 'selected' : ''}>–ì—Ä–∏–±</option>
                    <option value="–í–æ–ª–∫" ${pet.species === '–í–æ–ª–∫' ? 'selected' : ''}>–í–æ–ª–∫</option>
                    <option value="–î–∏–Ω–æ–∑–∞–≤—Ä" ${pet.species === '–î–∏–Ω–æ–∑–∞–≤—Ä' ? 'selected' : ''}>–î–∏–Ω–æ–∑–∞–≤—Ä</option>
                    <option value="–í–æ—Ä–æ–Ω" ${pet.species === '–í–æ—Ä–æ–Ω' ? 'selected' : ''}>–í–æ—Ä–æ–Ω</option>
                    <option value="–õ—É–ø–æ–≥–ª–∞–∑–∏–∫" ${pet.species === '–õ—É–ø–æ–≥–ª–∞–∑–∏–∫' ? 'selected' : ''}>–õ—É–ø–æ–≥–ª–∞–∑–∏–∫</option>
                    <option value="–ì–æ—Ä–≥—É–ª—å—è" ${pet.species === '–ì–æ—Ä–≥—É–ª—å—è' ? 'selected' : ''}>–ì–æ—Ä–≥—É–ª—å—è</option>
                    <option value="–û–ª–µ–Ω—å" ${pet.species === '–û–ª–µ–Ω—å' ? 'selected' : ''}>–û–ª–µ–Ω—å</option>
                    <option value="–ë–µ—Å" ${pet.species === '–ë–µ—Å' ? 'selected' : ''}>–ë–µ—Å</option>
                    <option value="–ö–æ—Ç–æ–∞–Ω–≥–µ–ª" ${pet.species === '–ö–æ—Ç–æ–∞–Ω–≥–µ–ª' ? 'selected' : ''}>–ö–æ—Ç–æ–∞–Ω–≥–µ–ª</option>
                    <option value="–õ–∏—Å" ${pet.species === '–õ–∏—Å' ? 'selected' : ''}>–õ–∏—Å</option>
                    <option value="–ü–∏–∫—Å–∏" ${pet.species === '–ü–∏–∫—Å–∏' ? 'selected' : ''}>–ü–∏–∫—Å–∏</option>
                    <option value="–ü–æ–¥—Å–æ–ª–Ω—É—Ö" ${pet.species === '–ü–æ–¥—Å–æ–ª–Ω—É—Ö' ? 'selected' : ''}>–ü–æ–¥—Å–æ–ª–Ω—É—Ö</option>
                    <option value="–ó–∞—è—Ü" ${pet.species === '–ó–∞—è—Ü' ? 'selected' : ''}>–ó–∞—è—Ü</option>
                    <option value="–û—Å—å–º–æ–∫—Ä—ã–ª" ${pet.species === '–û—Å—å–º–æ–∫—Ä—ã–ª' ? 'selected' : ''}>–û—Å—å–º–æ–∫—Ä—ã–ª</option>
                    <option value="–°—É–ø–µ—Ä–û–ª–µ–Ω—å" ${pet.species === '–°—É–ø–µ—Ä–û–ª–µ–Ω—å' ? 'selected' : ''}>–°—É–ø–µ—Ä–û–ª–µ–Ω—å</option>
                    <option value="–õ—é–º–∏–∫" ${pet.species === '–õ—é–º–∏–∫' ? 'selected' : ''}>–õ—é–º–∏–∫</option>
                    <option value="–í–∏–≤–µ—Ä–Ω–∞" ${pet.species === '–í–∏–≤–µ—Ä–Ω–∞' ? 'selected' : ''}>–í–∏–≤–µ—Ä–Ω–∞</option>
                </select>
                
                <select id="edit-pet-skill" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫</option>
                    <option value="–ê–ª—Ö–∏–º–∏—è" ${pet.skill_name === '–ê–ª—Ö–∏–º–∏—è' ? 'selected' : ''}>–ê–ª—Ö–∏–º–∏—è</option>
                    <option value="–ê—Ä–µ–Ω–∞" ${pet.skill_name === '–ê—Ä–µ–Ω–∞' ? 'selected' : ''}>–ê—Ä–µ–Ω–∞</option>
                    <option value="–ü–∞—Ä—Ç–Ω–µ—Ä—ã" ${pet.skill_name === '–ü–∞—Ä—Ç–Ω–µ—Ä—ã' ? 'selected' : ''}>–ü–∞—Ä—Ç–Ω–µ—Ä—ã</option>
                    <option value="–õ–∏–≥–∞" ${pet.skill_name === '–õ–∏–≥–∞' ? 'selected' : ''}>–õ–∏–≥–∞</option>
                    <option value="–õ–æ–∂–∞" ${pet.skill_name === '–õ–æ–∂–∞' ? 'selected' : ''}>–õ–æ–∂–∞</option>
                    <option value="–†—ã–±–∞–ª–∫–∞" ${pet.skill_name === '–†—ã–±–∞–ª–∫–∞' ? 'selected' : ''}>–†—ã–±–∞–ª–∫–∞</option>
                    <option value="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-—Ç–∞–ª–∞–Ω—Ç" ${pet.skill_name === '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-—Ç–∞–ª–∞–Ω—Ç' ? 'selected' : ''}>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-—Ç–∞–ª–∞–Ω—Ç</option>
                    <option value="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-–Ω–∞–≤—ã–∫–∏" ${pet.skill_name === '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-–Ω–∞–≤—ã–∫–∏' ? 'selected' : ''}>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏-–Ω–∞–≤—ã–∫–∏</option>
                    <option value="–¢–µ–º–Ω–∞—è –ø—Ä–æ–ø–∞—Å—Ç—å" ${pet.skill_name === '–¢–µ–º–Ω–∞—è –ø—Ä–æ–ø–∞—Å—Ç—å' ? 'selected' : ''}>–¢–µ–º–Ω–∞—è –ø—Ä–æ–ø–∞—Å—Ç—å</option>
                    <option value="–ö–æ–ª–æ–¥–µ—Ü" ${pet.skill_name === '–ö–æ–ª–æ–¥–µ—Ü' ? 'selected' : ''}>–ö–æ–ª–æ–¥–µ—Ü</option>
                    <option value="–ì—Ä–∏–±—ã" ${pet.skill_name === '–ì—Ä–∏–±—ã' ? 'selected' : ''}>–ì—Ä–∏–±—ã</option>
                    <option value="–ö—Ä–∏—Å—Ç–∞–ª–ª—ã" ${pet.skill_name === '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã' ? 'selected' : ''}>–ö—Ä–∏—Å—Ç–∞–ª–ª—ã</option>
                    <option value="–ö–æ–Ω–∫–ª–∞–≤" ${pet.skill_name === '–ö–æ–Ω–∫–ª–∞–≤' ? 'selected' : ''}>–ö–æ–Ω–∫–ª–∞–≤</option>
                </select>
                
                <select id="edit-pet-skill-level" required>
                    <option value="">–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞</option>
                    <option value="1" ${pet.skill_level === 1 ? 'selected' : ''}>I</option>
                    <option value="2" ${pet.skill_level === 2 ? 'selected' : ''}>II</option>
                    <option value="3" ${pet.skill_level === 3 ? 'selected' : ''}>III</option>
                    <option value="4" ${pet.skill_level === 4 ? 'selected' : ''}>IV</option>
                    <option value="5" ${pet.skill_level === 5 ? 'selected' : ''}>V</option>
                </select>
                
                <div class="pet-stats">
                    <h3>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞</h3>
                    <div class="stats-grid">
                        <div class="stat-input">
                            <label for="edit-pet-loyalty">–õ–æ—è–ª—å–Ω–æ—Å—Ç—å</label>
                            <input type="number" id="edit-pet-loyalty" value="${pet.loyalty || 5}" min="1" max="300" required>
                        </div>
                        <div class="stat-input">
                            <label for="edit-pet-agility">–õ–æ–≤–∫–æ—Å—Ç—å</label>
                            <input type="number" id="edit-pet-agility" value="${pet.agility || 5}" min="1" max="300" required>
                        </div>
                        <div class="stat-input">
                            <label for="edit-pet-stamina">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å</label>
                            <input type="number" id="edit-pet-stamina" value="${pet.stamina || 5}" min="1" max="300" required>
                        </div>
                        <div class="stat-input">
                            <label for="edit-pet-instinct">–ò–Ω—Å—Ç–∏–Ω–∫—Ç</label>
                            <input type="number" id="edit-pet-instinct" value="${pet.instinct || 5}" min="1" max="300" required>
                        </div>
                        <div class="stat-input">
                            <label for="edit-pet-charm">–û–±–∞—è–Ω–∏–µ</label>
                            <input type="number" id="edit-pet-charm" value="${pet.charm || 5}" min="1" max="300" required>
                        </div>
                    </div>
                </div>

                <div class="pet-options">
                    <label><input type="checkbox" id="edit-pet-ideal" ${pet.is_ideal ? 'checked' : ''}> üåü –ò–¥–µ–∞–ª—å–Ω—ã–π</label>
                    <label><input type="checkbox" id="edit-pet-mutant" ${pet.is_mutant ? 'checked' : ''}> üß¨ –ú—É—Ç–∞–Ω—Ç</label>
                </div>
                <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </form>
            <button class="btn-cancel">–û—Ç–º–µ–Ω–∞</button>
        </div>
    `;

    modal.classList.remove('hidden');

    document.getElementById('edit-pet-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        await updatePet(petId);
    });

    document.querySelector('.btn-cancel').addEventListener('click', () => {
        modal.classList.add('hidden');
    });
}

async function updatePet(petId) {
    try {
        const petData = {
            Name: document.getElementById('edit-pet-name').value,
            Species: document.getElementById('edit-pet-species').value,
            Skill_Name: document.getElementById('edit-pet-skill').value,
            Skill_Level: parseInt(document.getElementById('edit-pet-skill-level').value),
            Is_Ideal: document.getElementById('edit-pet-ideal').checked,
            Is_Mutant: document.getElementById('edit-pet-mutant').checked,
            Stats: {
                Loyalty: parseInt(document.getElementById('edit-pet-loyalty').value),
                Agility: parseInt(document.getElementById('edit-pet-agility').value),
                Stamina: parseInt(document.getElementById('edit-pet-stamina').value),
                Instinct: parseInt(document.getElementById('edit-pet-instinct').value),
                Charm: parseInt(document.getElementById('edit-pet-charm').value)
            }
        };

        await API.updatePet(petId, petData);
        document.getElementById('pet-modal').classList.add('hidden');
        await loadMyPets();

    } catch (error) {
        console.error('Error updating pet:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞: ' + error.message);
    }
}

async function deletePet(petId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }

    try {
        console.log('Deleting pet:', petId);
        await API.deletePet(petId);
        console.log('Pet deleted successfully:', petId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await loadMyPets();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞
        document.getElementById('pet-modal').classList.add('hidden');

        alert('–ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');

    } catch (error) {
        console.error('Error deleting pet:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞: ' + error.message);
    }
}

async function bookPet(petId) {
    try {
        const result = await API.bookPet(petId);
        console.log('Pet booked:', result);
        alert('–ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!');
        await loadAllPets(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ (–ø–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
    } catch (error) {
        console.error('Error booking pet:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: ' + error.message);
    }
}

async function manageQueue(petId) {
    try {
        const queue = await API.getPetQueue(petId);
        const pet = allPets.find(p => p.id === petId);

        const modal = document.getElementById('pet-modal');
        const modalBody = document.getElementById('modal-body');

        modalBody.innerHTML = `
            <div class="queue-management">
                <h2>–û—á–µ—Ä–µ–¥—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${pet.name}</h2>
                
                ${queue.length > 0 && queue[0].ready_in === 0 ? `
                    <div class="completion-section">
                        <p>üêæ –ü–∏—Ç–æ–º–µ—Ü –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</p>
                        <button class="btn-complete" onclick="completeBooking(${petId})">
                            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
                        </button>
                    </div>
                ` : ''}
                
                <div class="queue-management-list">
                    ${queue.length === 0 ?
            '<p class="empty-queue">–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</p>' :
            queue.map((booking, index) => `
                            <div class="management-item ${index === 0 ? 'current' : ''}" 
                                 onclick="selectQueueItem(${index})"
                                 id="queue-item-${index}">
                                <div class="item-info">
                                    <span class="item-position">${index + 1}.</span>
                                    <span class="item-user">${booking.nickname}</span>
                                    <span class="item-time">${formatWaitTime(booking.ready_in)}</span>
                                </div>
                                <div class="item-actions">
                                    <button class="btn-up" onclick="event.stopPropagation(); moveInQueue(${petId}, ${booking.id}, 'up')" 
                                        ${index === 0 ? 'disabled' : ''}>‚Üë</button>
                                    <button class="btn-down" onclick="event.stopPropagation(); moveInQueue(${petId}, ${booking.id}, 'down')" 
                                        ${index === queue.length - 1 ? 'disabled' : ''}>‚Üì</button>
                                </div>
                            </div>
                        `).join('')
        }
                </div>
                
                <button class="btn-cancel">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `;

        modal.classList.remove('hidden');

        document.querySelector('.btn-cancel').addEventListener('click', () => {
            modal.classList.add('hidden');
        });

    } catch (error) {
        console.error('Error loading queue:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
function selectQueueItem(index) {
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.management-item').forEach(item => {
        item.classList.remove('selected');
    });
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    document.getElementById(`queue-item-${index}`).classList.add('selected');
}

async function completeBooking(petId) {
    try {
        await API.completeBooking(petId);
        alert('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–∏—Ç–æ–º–µ—Ü —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.');
        await manageQueue(petId); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
    } catch (error) {
        console.error('Error completing booking:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏: ' + error.message);
    }
}

async function moveInQueue(petId, bookingId, direction) {
    try {
        await API.updateQueuePosition(petId, { bookingId, direction });
        await manageQueue(petId); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    } catch (error) {
        console.error('Error moving in queue:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: ' + error.message);
    }
}

function formatWaitTime(hours) {
    if (hours === 0) return '‚úÖ –ì–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å';

    const days = Math.floor(hours / 24);
    const remainingHours = hours % 24;

    if (days > 0) {
        return `‚è≥ –ì–æ—Ç–æ–≤ —á–µ—Ä–µ–∑: ${hours}—á (~${days} ${getDayWord(days)})`;
    } else {
        return `‚è≥ –ì–æ—Ç–æ–≤ —á–µ—Ä–µ–∑: ${hours}—á`;
    }
}

function getDayWord(days) {
    if (days === 1) return '–¥–µ–Ω—å';
    if (days >= 2 && days <= 4) return '–¥–Ω—è';
    return '–¥–Ω–µ–π';
}