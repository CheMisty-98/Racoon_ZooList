class API {
    static baseURL = '/api';

    static async request(endpoint, options = {}) {
        const token = localStorage.getItem('token');
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...(token && { 'Authorization': `Bearer ${token}` })
            },
            ...options
        };

        try {
            const fullURL = `${this.baseURL}${endpoint}`;
            console.log('Making request to:', fullURL); // ‚Üê –î–õ–Ø –û–¢–õ–ê–î–ö–ò

            const response = await fetch(fullURL, config);

            console.log('Response status:', response.status); // ‚Üê –î–õ–Ø –û–¢–õ–ê–î–ö–ò

            // üî• –û–ë–†–ê–ë–û–¢–ö–ê 401 –û–®–ò–ë–ö–ò
            if (response.status === 401) {
                localStorage.removeItem('token');
                throw new Error('AUTH_REQUIRED'); // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏
            }


            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Response data:', data); // ‚Üê –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            return data;

        } catch (error) {
            console.error('API request failed:', error);
            throw error;
        }
    }

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    static async login(credentials) {
        const response = await fetch(`${this.baseURL}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(credentials)
        });

        if (!response.ok) {
            throw new Error(`Login failed: ${response.status}`);
        }

        const result = await response.json();
        console.log('Login response:', result);
        return result;
    }

    static async register(userData) {
        const response = await fetch(`${this.baseURL}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData)
        });

        if (!response.ok) {
            throw new Error(`Registration failed: ${response.status}`);
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∞ –Ω–µ JSON
        const result = await response.text();
        console.log('Register response:', result);
        return result;
    }

    // –ü–∏—Ç–æ–º—Ü—ã
    static async getMyPets() {
        return this.request('/pets/my');  // –ë–´–õ–û: /my-pets
    }

    static async getAllPets() {
        return this.request('/pets/list'); // –ë–´–õ–û: /pets
    }

    static async createPet(petData) {
        console.log('üìù Sending pet data to API:', petData); // ‚Üê –î–û–ë–ê–í–¨ –û–¢–õ–ê–î–ö–£
        return this.request('/pets', {
            method: 'POST',
            body: JSON.stringify(petData)
        });
    }

    static async updatePet(petId, petData) {
        return this.request(`/pets/${petId}/edit`, {
            method: 'PUT',
            body: JSON.stringify(petData)
        });
    }

    static async deletePet(petId) {
        return this.request(`/pets/${petId}/delete`, {
            method: 'DELETE'
        });
    }

    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    static async getMyBookings() {
        return this.request('/bookings/my');
    }

    static async bookPet(petId) {
        return this.request(`/pets/${petId}/book`, {  // –¢–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—ç–∫–µ–Ω–¥—É
            method: 'POST',
            body: JSON.stringify({ pet_id: petId })
        });
    }

    static async cancelBooking(petId) {  // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç petId –≤–º–µ—Å—Ç–æ bookingId
        return this.request(`/pets/${petId}/cancel`, {
            method: 'POST'
            // ‚úÖ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω—É–∂–Ω–æ - petId –±–µ—Ä–µ—Ç—Å—è –∏–∑ URL
        });
    }

    static async getPetQueue(petId) {
        try {
            const response = await fetch(`${this.baseURL}/pets/${petId}/queue`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            console.log('Queue response status:', response.status);

            // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –æ—à–∏–±–∫—É
            const responseText = await response.text();
            console.log('Full response text:', responseText);

            const contentType = response.headers.get('content-type');
            console.log('Content-Type:', contentType);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}. Response: ${responseText}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç JSON
            if (!contentType || !contentType.includes('application/json')) {
                console.error('Non-JSON response:', responseText.substring(0, 200));
                throw new Error('Server returned non-JSON response');
            }

            const data = JSON.parse(responseText);
            console.log('Queue data:', data);
            return data;

        } catch (error) {
            console.error('Error in getPetQueue:', error);
            throw error;
        }
    }

    static async updateQueuePosition(petId, queueData) {
        try {
            const response = await fetch(`${this.baseURL}/pets/${petId}/queue/${queueData.direction}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ bookingId: queueData.bookingId })
            });

            console.log('Move queue response status:', response.status);

            const responseText = await response.text();
            console.log('Move queue response text:', responseText);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}. Response: ${responseText}`);
            }

            return JSON.parse(responseText);
        } catch (error) {
            console.error('Error in updateQueuePosition:', error);
            throw error;
        }
    }

    static async completeBooking(petId) {
        try {
            const response = await fetch(`${this.baseURL}/pets/${petId}/complete`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            console.log('Complete booking response status:', response.status);

            const responseText = await response.text();
            console.log('Complete booking response text:', responseText);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}. Response: ${responseText}`);
            }

            return JSON.parse(responseText);
        } catch (error) {
            console.error('Error in completeBooking:', error);
            throw error;
        }
    }
}